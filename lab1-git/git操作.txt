实验场景1：仓库创建与提交
1. **R0：查看状态**  
   ```bash
   git status
   ```

2. **R1：初始化仓库并添加文件**  
   ```bash
   git init
   git add .           # 添加所有文件到暂存区
   ```

3. **R2：提交**  
   ```bash
   git commit -m "Initial commit"
   ```

4. **手工修改文件后**  
   ```bash
   # 修改文件内容（手动操作）
   ```

5. **R3：查看修改内容**  
   ```bash
   git diff            # 查看未暂存的修改
   git log -p          # 查看提交历史及具体修改
   ```

6. **R4：重新提交**  
   ```bash
   git add .           # 将修改后的文件加入暂存区
   git commit -m "Second commit"
   ```

7. **再次修改文件后**  
   ```bash
   # 修改文件内容（手动操作）
   ```

8. **R5：重新提交**  
   ```bash
   git add .
   git commit -m "Third commit"
   ```

9. **R6：撤销最后一次提交**  
   ```bash
   git reset --soft HEAD~1   # 保留修改，撤销提交
   # 或
   git reset --hard HEAD~1   # 丢弃修改，彻底回退
   ```

10. **R7：查看提交记录**  
    ```bash
    git log             # 查看完整提交历史
    ```

---

### **实验场景1补充：推送到GitHub**
1. **R8：关联远程仓库**  
   ```bash
   git remote add origin https://github.com/你的用户名/Lab1-学号.git
   ```

2. **R9：推送本地仓库到GitHub**  
   ```bash
   git push -u origin master    # 首次推送
   ```

---

### **实验场景2：分支管理**
1. **R1：查看分支并切换到master**  
   ```bash
   git branch           # 查看所有分支
   git checkout master  # 切换到master分支
   ```

2. **R2：创建分支B1和B2**  
   ```bash
   git branch B1
   git branch B2
   ```

3. **R3：基于B2创建分支C4并切换**  
   ```bash
   git checkout B2
   git branch C4
   git checkout C4
   ```

4. **R4：在C4修改文件并提交**  
   ```bash
   # 修改文件后：
   git add .
   git commit -m "Commit on C4"
   ```

5. **R5：在B1修改文件并提交**  
   ```bash
   git checkout B1
   # 修改文件（与C4冲突的内容）
   git add .
   git commit -m "Commit on B1"
   ```

6. **R6：合并C4到B1并解决冲突**  
   ```bash
   git checkout B1
   git merge C4         # 合并冲突
   # 手动解决冲突后：
   git add .
   git commit -m "Merge C4 into B1"
   ```

7. **R7：在B2修改文件并提交**  
   ```bash
   git checkout B2
   # 修改文件后：
   git add .
   git commit -m "Commit on B2"
   ```

8. **R8：查看已合并/未合并的分支**  
   ```bash
   git branch --merged  # 已合并的分支
   git branch --no-merged # 未合并的分支
   ```

9. **R9：删除已合并分支，合并未合并分支到新分支**  
   ```bash
   git branch -d B1     # 删除已合并的B1
   git checkout -b 学号  # 创建新分支
   git merge B2         # 合并未合并的B2
   ```

10. **R10：推送新分支到GitHub**  
    ```bash
    git push origin 学号
    ```

11. **R11：查看版本树**  
    ```bash
    git log --graph --oneline --all
    ```

12. **R12：在GitHub网页查看仓库状态**  
    手动访问GitHub仓库页面即可。


实验场景3：在IDE中使用Git**
1. **在IDE中初始化Git仓库**  
   （通常IDE会自动识别或提供图形化操作，无需命令）

2. **提交修改并推送**  
   （通过IDE的Git插件完成`commit`和`push`操作）

注意事项
- 若命令执行出错，可通过 `git --help` 或查阅文档解决。
- 分支合并冲突时，需手动编辑文件标记为`<<<<<<< HEAD`和`=======`的部分，解决后重新提交。
- 确保GitHub仓库的URL和权限正确。